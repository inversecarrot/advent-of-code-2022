{
	// Place your advent-of-code-2022 workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"New day template": {
		"scope": "python",
		"prefix": "class Day",
		"body": [
			"from io import TextIOWrapper",
			"import logging",
			"from advent_day import AdventDay",
			"",
			"log = logging.getLogger(__name__)",
			"",
			"class Day${1: number}(AdventDay):",
    		"\tinput: TextIOWrapper",
			"",
			"\tdef __init__(self, input: TextIOWrapper):",
			"\t\tsuper().__init__(input)",
        	"\t\tself.input = input",
        	"\t\tself._parse_input(input)",
			"",
    		"\tdef _parse_input(self, input: TextIOWrapper):",
        	"\t\tpass",
        	"",
    		"\tdef part1(self):",
        	"\t\treturn \"\"",
    		"",
    		"\tdef part2(self):",
        	"\t\treturn \"\"",
		],
		"isFileTemplate": true
	},
	"Day test template":{
		"scope": "python",
		"prefix": "class Day",
		"body":[
				"import logging",
				"",
				"from advent_test.advent_day_test_case import AdventDayUnitTestCase",
				"",
				"class Day${1:number}TestCase(AdventDayUnitTestCase):",
				"\tINPUT_FILE = 'day${1:number}.txt'",
				"",
				"\tdef setUp(self):",
				"\t\tsuper().setUp(self.INPUT_FILE)",
				"\t\tlogging.basicConfig(level = logging.DEBUG)",
				"",
				"",
				"\tdef test_parse_input(self):",
				"\t\tpass",
				"",
				"\tdef test_part_1(self):",
				"\t\tpass",
				"",
				"\tdef test_part_2(self):",
				"\t\tpass",
		]
	}
}